@shorttitle(Overview)
@title(Internet-Tools Overview)

@section(1 AnchorNameInstallation Installation)


Since the Internet Tools and their XQuery-Engine consist of a set of simple Pascal units they do not require installation.

Just set the search paths of the project, so that all necessary units are found. Important paths: data/, internet/ and import/regexpr/source.

There is also a Lazarus package internettools.lpk, which can be installed in Lazarus to set these paths with project dependencies. But this is optional.

@section(1 AnchorNameStarted Getting Started)

If you just want to download things, you can use the function @link(simpleinternet.retrieve retrieve) of the unit simpleinternet.@br@br

You can also further @noAutoLink(process) the data with the function @link(simpleinternet.process process) of the same unit.@br@br

For example, this will write the title of a webpage:

@longCode(#
  uses simpleinternet;
  writeln(process('http://example.org', '//title').toString);
#)

This will write the destination of all links there:

@longCode(#
  uses simpleinternet;
  var v: IXQValue;
  begin
    for v in process('http://example.org', '//a/@href') do
      writeln(v.toString);      
  end.
#)

And this will write the destination and name of all links :

@longCode(#
  uses simpleinternet;
  var v: IXQValue;
  begin
    for v in process('http://example.org', '//a/concat(., ": ", @href)') do
      writeln(v.toString);      
  end.
#)

@section(1 AnchorNameXYZ Accessing the internet/downloading things)

The class TInternetAccess for accessing the internet is defined in the unit internetaccess, and contains several abstract methods to get/post http-data (other internet services like ftp/smtp might be added in future versions). @br 

Inherited from TInternetAccess are TSynapseInternetAccess and TW32InternetAccess (in the units synapseinternetaccess and w32internetaccess) which provide wrappers around synapse and wininet.  So you can easily switch between the two libraries and choose the most appropriate (wininet integrates better with windows systems, because it does not require openssl, but synapse it platform independent).


@section(1 AnchorNameXYZABC Data processing)

There are several ways to actually process a downloaded html/xml-document.@br
It is implemented as a hierarchy of data processing classes, from a high level template language to a low level tokenizer, where each levels uses the things from the lower level.

@section(2 AnchorNameTemplate High-Level: (Pattern-matching) template processing)

The most powerful processing language is implemented by the THtmlTemplateParser-class in the unit extendedhtmlparser.@br

To create a template, you can take the document you want to process and remove all unimportant things, which results in a pattern template that can be matched against the page to find the relevant elements.
These elements can then be read into variables, by annotating them with the corresponding variable names.@br


A collection of such single-page templates can be stored in a multi-page template file, which can be loaded with the TMultipageTemplate class and applied to the these pages by the TMultipageTemplateReader class.

   (Notice: Although both the multi-page and single-page templates are called templates, they are actually something
    *entirely* different:
       A multi-page template is a list of explicit actions that are performed in order, like an algorithm;
       A single-page template is an implicit pattern that is matched against the page, like a regular expression)

@section(2 AnchorNamePXP High-Mid-Level: XQuery/XPath/Expression processing)

The XQuery expression language which can be used within the templates is implemented by the class TXQueryEngine in the unit @link(xquery).

It is an almost complete implementation of the XPath 2 and XQuery standard (missing schemas, error codes and static type checking) + some  extensions (e.g. objects and global variable assignments).

@section(2 AnchorNameTree Mid-Level: Tree/DOM-like processing)

To @noAutoLink(process) a html file directly in fpc, without using another, interpreted language, you can use the class TTreeParser  in the unit simplehtmltreeparser.. @br

It creates a tree of TTreeElement-s from the  html document text (you know such trees from DOM, but this tree has nothing to do with do(o)m).@br

You can also use the class TTreeParserDOM in the unit simplexmltreeparserfpdom to import a DOM document read by the standard fpc xml parser

@section(2 AnchorNameSimple Low-Level: Lexer/SAX-like interface)

At the lowest level you find the parseHTML function of the unit simplehtmlparser. @br 

It just splits a html document into tags and text elements and calls a callback function for each of the elements. @br@br

A similar function, parseXML, exists for xml data in the unit simplexmlparser (it treats the xml file as html file, but checks for things like  xml processing instructions). 

@section(1 AnchorNameOthers Other  things)

@unorderedList(
@item(The unit autoupdate contains the TAutoUpdater class which can look online for an available update for the current system architecture and then download/install it)
@item(The unit int65math contains functions to do calculations with 65-bit integers.)
@item(The unit bbutils contains low-level functions, that are way below the simplehtmlparser and should actually be in the fpc rtl, but are not.  )
@item(The unit pastemplate implements a very simple template language for pascal units (such a template is used to generate bbutils) )
)


